Инструкция по работе и настройке DRF

python3 -m venv env
source env/bin/activate
-----------------------------------------------------------------------------------------
touch req.txt
///req.txt
django
djangorestframework
django-rest-auth
pip install -r req.txt
-----------------------------------------------------------------------------------------
django-admin startproject dgebase .
-----------------------------------------------------------------------------------------
touch .gitignore
///.gitignore
env
.idea
db.sqlite3
__pycache__/
*.pyc
///
-----------------------------------------------------------------------------------------
git init
git add .
git commit -m "initial commit"
-----------------------------------------------------------------------------------------
python3 manage.py startapp mainbase1
-----------------------------------------------------------------------------------------
///+++dgebase/settings.py--> initialled_apps
    ['rest_framework', 'rest_framework.authtoken', 'mainbase1',]
///
-----------------------------------------------------------------------------------------
///+++ mainbase1/models.py
    from django.contrib.auth import  get_user_model
    User = get_user_model()
    class Mainbase1(models.Model):
        owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='mainbase1', null=True)
        reg_id = models.IntegerField(auto_created=True)
        register_at = models.DateTimeField(auto_now_add=True)
        pr_name = models.TextField()
        pr_zacaz = models.TextField()
        pr_proectir = models.TextField()
        finished_at = models.DateTimeField(null=True)
        is_finished = models.BooleanField(default=False)
        estimated_finish_time = models.DateTimeField()
///
-----------------------------------------------------------------------------------------
./manage.py makemigrations
./manage.py migrate
-----------------------------------------------------------------------------------------
git add .
git commit -m "Add task model"

///+++ dgebase/ursl.py
    from django.urls import path, include
    urlpatterns = [
        path('admin/', admin.site.urls),
        path('tasks/', include('tasks.urls')),
    ]
///
touch mainbase1/serializers.py   /// набор правил для превращение данных в json объекты
///+++ mainbase1/serializers.py
    from rest_framework import serializers
    from django.contrib.auth import get_user_model
    from .models import Mainbase1
    User = get_user_model()

    class UserSerializer(serializers.ModelSerializer):
        class Meta:
            model = User
            fields = ['id', 'username', ]

    class Mainbase1Serializer(serializers.ModelSerializer):
        estimated_finish_time = serializers.DateTimeField()
        owner = UserSerializer(read_only=True)
        class Meta:
            model = Mainbase1
            fields = ['id', 'owner', 'reg_id', 'register_at', 'pr_name', 'pr_zacaz', 'pr_proectir', 'finished_at', 'estimated_finish_time', 'is_finished', ]
            read_only_fields = ['is_finished', ]
///
-----------------------------------------------------------------------------------------
touch mainbase1/views.py
///+++ mainbase1/views.py
    from rest_framework.permissions import IsAuthenticated
    from mainbase1.models import Mainbase1
    from mainbase1.serializers import Mainbase1Serializer
    from rest_framework import views, generics

    # Это сокращение
    class Mainbase1ListCreateView(generics.ListCreateAPIView):
        permission_classes = [IsAuthenticated, ]
        queryset = Mainbase1.objects.all()
        serializer_class = Mainbase1Serializer
    # Это сокращение
    class Mainbase1DetailUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):
        permission_classes = [IsAuthenticated, ]
        queryset = Mainbase1.objects.all()
        serializer_class = Mainbase1Serializer
        lookup_field = 'id'
///
-----------------------------------------------------------------------------------------
touch mainbase1/urls.py
///+++ mainbase1/urls.py
    from django.urls import path
    from .views import Mainbase1ListCreateView, Mainbase1DetailUpdateDestroy
    urlpatterns = [
        path('', Mainbase1ListCreateView.as_view()),
        path('<int:id>', Mainbase1DetailUpdateDestroy.as_view()),
    ]
///
-----------------------------------------------------------------------------------------
///для проверки можно зарегать Task в админке
///+++ mainbase1/admin.py
    from .models import Mainbase1
    admin.site.register(Mainbase1)
///
-----------------------------------------------------------------------------------------
Создаем суперюзера
./manage.py createsuperuser
-----------------------------------------------------------------------------------------
./manage.py runserver

